SEARCH FUNCTION

TODO : pseudocode for sorting database into a possibly hash table.
Sorting database:
Idea 1: put tag into a hash table

1. Make struct "ptr_tag"  with 2 fields: one for tag, and one for an array of pointer(maybe i Have to check how to do that). The array have to be
the size of the number of notes.

2. Make struct "note" with 3 fields: one for char * note, one for char * commentary, and one array of tag[30].

3. Make a hash function

4. Create a hash_table_tag with a size of #DEFINE 200.

5. Create an array of struct note, and put all the note in it (note with 3 fields: notes, array of 30 tag, and commentary).

5. Check all lines of .favorites.db. For each tag, compute a hash_val, and put in the field of this value into the hash table, the struct ptr_tag
with one field with the tag himself, and the other field (array of pointer) pointing to the note we are currently looking for.

6. If in an another note, we compute a hash tag val that already exists, put the pointer into the next arr_pointer available in the struct ptr_tag.

7. After that, we should be ready for searching.

ABANDON
Hash table with multiple strucs and multiple fields is not efficient for just a note and a comment wich contains 30 tags.

Idea2 : linear search
1. Create a struct "favorites" with 3 fields: one for note, one for comment, and one for an array of tags (max is 30).

2. Read the document .favorites.db. Compute the total of lines and create an array of (struct) favorite size of numbers of lines.

3. Fill this array. For each line, complete fields note, comment, and arr_tag.


Ask for tag:

1. Prompt user for tag.
	- set all uppercase to lowercase.
	- check for special letters. If, inform and prompt again.

2. Check if tag exists. If not, inform and prompt again (go back to 1).
	- if tag == exit, quit the program. ! Important to forbidden tag 'exit' in get_tag function.

3. If tag exist
	-Show all notes and comment with this tag. Then, prompt again for another tag, with older input tag already in the input bar of the terminal.
	-If tag == exit, quit the program, even with the older tag in the input bar.

4. If second input of tag:
	- Search a favorites wich contain first tag. If found, search in this scruct favorite for the second input tag. If found, print the result to the screen.
